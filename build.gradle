import gov.nyc.doitt.nyc.gis.gradle.*

plugins {
    id 'base'
    id 'jetty'
    id 'org.hidetake.ssh' version '1.1.2'
}

ext{
	appName = 'nyc-hurricane'
	ver = 'v0.1.7-SNAPSHOT'
	
	jsSrcDir = "build/${ver}/js"
	cssSrcDir = "build/${ver}/css"

	orderedJsFiles = ['style.js', 'app.js', 'init.js']
	orderedCssFiles = ['hurricane.css']

	local_nyclib = 'https://maps.nyc.gov/nyc-lib/'
	stg_nyclib = '/nyc-lib/'
	prd_nyclib = '/nyc-lib/'
	
	default_env = 'local'
	remoteDir = "hurricane-2015"	
}

task setEnv << {
	if (!project.hasProperty('env')) project.ext.env = default_env
 	archive.archiveName = "hurricane-${ver}-${env}.zip"
	archive.from {"build/${ver}"}
}

task copyFiles(dependsOn: clean) << {
	def build = new File("build/${ver}")
	build.mkdirs()
	copy {
		from 'src/main/webapp'
		include '*.html'
		include '*.json'
		include 'img/**'
		exclude 'img/Thumbs.db'
		include 'css/**'
		include 'js/**'
		into "build/${ver}" 
	}
}

task replaceTokens(dependsOn: [setEnv, copyFiles]) << {
	ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
	if (project.hasProperty("hurricane.${env}.geoclient.url")){
		ant.replace(file: "build/${ver}/js/init.js", token: project.ext['hurricane.git.geoclient.url'], value: project.ext["hurricane.${env}.geoclient.url"])
	}
	if (project.hasProperty("hurricane.${env}.google.url")){
		ant.replace(file: "build/${ver}/js/init.js", token: project.ext['hurricane.local.google.url'], value: project.ext["hurricane.${env}.google.url"])
	}
	if (project.hasProperty('hurricane.analytics')){
		ant.replace(file: "build/${ver}/index.html", token: '/* google analytics */', value: project.ext['hurricane.analytics'])
		ant.replace(file: "build/${ver}/down.html", token: '/* google analytics */', value: project.ext['hurricane.analytics'])
	}

	ant.replace(file: "build/${ver}/index.html", token: 'hurricane.css', value: "${appName}.css")
	ant.replace(file: "build/${ver}/index.html", token: '<script src="js/style.js"></script>', value: '')
	ant.replace(file: "build/${ver}/index.html", token: '<script src="js/app.js"></script>', value: '')
	ant.replace(file: "build/${ver}/index.html", token: 'js/init.js', value: "js/${appName}.js")
	ant.replace(file: "build/${ver}/index.html", token: local_nyclib, value: project.ext["${env}_nyclib"])

}

task minifyScript(type: MiniJsTask, dependsOn: [replaceTokens]) {
	libName = appName
	version = ver
	fileNames = orderedJsFiles
	sourceDir = jsSrcDir
	destinationDir = "build/${ver}/js" 
}
minifyScript.doLast {
	delete fileTree(dir: "build/${ver}/js", include: '*.js', exclude: "${appName}.*")
}

task minifyCss(type: MiniCssTask, dependsOn: [replaceTokens]) {
	libName = appName
	fileNames = orderedCssFiles
	sourceDir = cssSrcDir
	destinationDir = "build/${ver}/css" 
}
minifyCss.doLast {
	delete fileTree(dir: "build/${ver}/css", include: 'hurricane.css', exclude: "${appName}.*")
}

task buildApp(dependsOn: [minifyScript, minifyCss]) << {}

task archive(type: Zip, dependsOn: [buildApp]) {}

remotes {
	deployTarget {}
}

task deploy(dependsOn: [archive]) << {
	def archiveDir = project.ext['archive.dir']
	def deployDir = project.ext['hurricane.deploy.dir']
	
	remotes.deployTarget.host = project.ext["${env}.host"]
    remotes.deployTarget.user = project.ext["${env}.user"]	
    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	
	ssh.run {
        session(remotes.deployTarget) {
        	execute "mkdir -p ${archiveDir}"
        	execute "mkdir -p ${deployDir}"
            put "build/distributions/${archive.archiveName}", archiveDir
            execute "cp -R ${deployDir} ${deployDir}.bak"
            execute "rm -rf ${deployDir}"
            execute "unzip ${archiveDir}/${archive.archiveName} -d ${deployDir}"
            execute "rm -rf ${deployDir}.bak"
        }
    }
}

task createEvacuationOrder(dependsOn: [setEnv]) << {
	def console = System.console()
	def zones = console.readLine('\n\n> Enter a comman-delimited list of zones (1-7) requiring evacuation or ENTER to clear existing orders:')
	def errors = new ArrayList<String>()

	zones = zones.length() > 0 ? zones.split(',') : []
	
	for (zone in zones){ 
		def zn = new Integer(zone)
		if (zn < 1 || zn > 7) {
			errors.add("${zone} is not a valid zone")
		}
	}
	if (errors.size() > 0){
		throw new GradleException ("\n\nERRORS: ${errors}\nNO EVACUATION ORDERS HAVE BEEN DEPLOYED\n\n") 
	}else{
		def mobileDir = project.ext['mobile.dir']
		def deployDir = "${mobileDir}/${remoteDir}"
	
		mkdir('build')
		file('build/order.json').text = zones.toString()
	
		remotes.deployTarget.host = project.ext["${env}.host"]
	    remotes.deployTarget.user = project.ext["${env}.user"]	
	    remotes.deployTarget.identity = file("${System.properties['user.home']}/.ssh/id_rsa")
		
		ssh.run {
	        session(remotes.deployTarget) {
	            execute "cp ${deployDir}/order.json ${deployDir}/order.json.bak"
	            put "build/order.json", deployDir
	            execute "rm ${deployDir}/order.json.bak"
	        }
	    }
	    
	    println "EVACUATION ORDERS FOR ZONES ${zones} HAVE BEEN DEPLOYED TO ${remotes.deployTarget.host}"
	}
}

[jettyRun]*.with {
    webXml = file("etc/jetty/webdefault.xml")
}

jettyRun {
	webAppSourceDirectory file('./')
	contextPath ''
	httpPort 8088
	stopPort 8090
	stopKey 'stopKey'
	reload 'automatic'
	scanIntervalSeconds 2
}
jettyRun.dependsOn setEnv
jettyRun.doFirst { 
	if (project.hasProperty('env') && project.hasProperty("crime.${env}.geoclient.url")){
	    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: 'src/main/webapp/js/init.js', token: project.ext['hurricane.git.geoclient.url'], value: project.ext["hurricane.${env}.geoclient.url"])
		ant.replace(file: 'src/test/webapp/js/setup-teardown.js', token: project.ext['hurricane.git.geoclient.url'], value: project.ext["hurricane.${env}.geoclient.url"])
	}
}

jettyStop {
	stopPort 8090
	stopKey 'stopKey'
}
jettyStop.dependsOn setEnv
jettyStop.doFirst { 
	if (project.hasProperty('env') && project.hasProperty("crime.${env}.geoclient.url")){
	    ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
		ant.replace(file: 'src/main/webapp/js/init.js', token: project.ext["hurricane.${env}.geoclient.url"], value: project.ext['hurricane.git.geoclient.url'])
		ant.replace(file: 'src/test/webapp/js/setup-teardown.js', token: project.ext["hurricane.${env}.geoclient.url"], value: project.ext['hurricane.git.geoclient.url'])
	}
}

task wrapper(type: Wrapper) {
    gradleVersion '2.9'
}
